syntax = "proto3";

package buoyant.cloud;

option go_package = "github.com/buoyantio/linkerd-buoyant/gen/bcloud";

import "google/protobuf/timestamp.proto";

//
// shared messages
//

message Empty {}

message Auth {
  string agent_id = 1;
  string agent_key = 2;
}

message Workload {
  oneof workload {
    DaemonSet daemonset = 1;
    Deployment deployment = 2;
    StatefulSet statefulset = 3;
  }
}

message DaemonSet {
  bytes daemon_set = 1;
  repeated Pod pods = 2;
}

message Deployment {
  bytes deployment = 1;
  repeated ReplicaSet replica_sets = 2;
}

message StatefulSet {
  bytes stateful_set = 1;
  repeated Pod pods = 2;
}

message ReplicaSet {
  bytes replica_set = 1;
  repeated Pod pods = 2;
}

message Pod {
  bytes pod = 1;
}

//
// WorkloadStream messages
//

message WorkloadMessage {
  oneof message {
    Auth auth = 1;

    AddWorkload added = 2;
    UpdateWorkload updated = 3;
    DeleteWorkload deleted = 4;
    ListWorkloads list = 5;
  }
}

message AddWorkload {
  Workload workload = 1;
}

message DeleteWorkload {
  Workload workload = 1;
}

message UpdateWorkload {
  Workload old_workload = 1;
  Workload new_workload = 2;
  google.protobuf.Timestamp timestamp = 3;
}

message ListWorkloads {
  repeated Workload workloads = 1;
}

//
// AddEvent messages
//

message Event {
  Auth auth = 1;
  bytes event = 2;
  Workload owner = 3;
}

//
// Linkerd Messages
//

// This message represents a PEM encoded certificate
message CertData {
  bytes raw = 1;
}

// Represents the certificates that the control plane
// has been configured with.
message ControlPlaneCerts {
  // This is the identity issuer certificate chain
  repeated CertData issuer_crt_chain = 1;
  // The roots that the control plane has been configured with
  repeated CertData roots = 2;
}

// A message that carries one or more pod certificates
message ProxyCerts {
  repeated ProxyCert certs = 1;

  message ProxyCert {
    // The peer chain which include the issuer
    // cert as well as the leaf certificate
    repeated CertData peer_crt_chain = 1;
    // The roots this proxy has been configured with
    repeated CertData roots = 2;
    string pod_name = 3;
    string namespace = 4;
    string workload_name = 5;
  }
}

message WebhookCerts {
  // The certificate chain for this webhook cert
  CertData crt_chain = 1;
  string component_name = 2;
}

message CertificateInfo {
  oneof info {
    ControlPlaneCerts control_plane = 1;
    ProxyCerts proxy = 2;
    WebhookCerts webhook = 3;
  }
}

message LinkerdMessage {
  Auth auth = 1;
  oneof message {
    CertificateInfo crt_info = 2;
  }
}

//
// API
//

service Api {
  rpc WorkloadStream(stream WorkloadMessage) returns (Empty) {}
  rpc AddEvent(Event) returns (Empty) {}
  rpc LinkerdInfo(LinkerdMessage) returns (Empty) {}
}
