syntax = "proto3";

package buoyant.cloud;

option go_package = "github.com/buoyantio/linkerd-buoyant/gen/bcloud";

import "google/protobuf/timestamp.proto";

//
// shared messages
//

message Empty {}

message Auth {
  option deprecated = true;
  string agent_id = 1;
  string agent_key = 2;
}

message Workload {
  oneof workload {
    DaemonSet daemonset = 1;
    Deployment deployment = 2;
    StatefulSet statefulset = 3;
  }
}

message DaemonSet {
  bytes daemon_set = 1;
  repeated Pod pods = 2;
}

message Deployment {
  bytes deployment = 1;
  repeated ReplicaSet replica_sets = 2;
}

message StatefulSet {
  bytes stateful_set = 1;
  repeated Pod pods = 2;
}

message ReplicaSet {
  bytes replica_set = 1;
  repeated Pod pods = 2;
}

message Pod {
  bytes pod = 1;
}

message ConfigMap {
  bytes config_map = 1;
}

message Node {
  bytes node = 1;
}

message Service {
  bytes service = 1;
}

//
// WorkloadStream messages
//

message WorkloadMessage {
  oneof message {
    Auth auth = 1 [deprecated=true];

    AddWorkload added = 2;
    UpdateWorkload updated = 3;
    DeleteWorkload deleted = 4;
    ListWorkloads list = 5;
  }
}

message AddWorkload {
  Workload workload = 1;
}

message DeleteWorkload {
  Workload workload = 1;
}

message UpdateWorkload {
  Workload old_workload = 1;
  Workload new_workload = 2;
  google.protobuf.Timestamp timestamp = 3;
}

message ListWorkloads {
  repeated Workload workloads = 1;
}

//
// AddEvent messages
//

message Event {
  Auth auth = 1 [deprecated=true];
  bytes event = 2;
  Workload owner = 3;
}

//
// Linkerd Messages
//

// This message represents a PEM encoded certificate
message CertData {
  bytes raw = 1;
}

// Represents the certificates that the control plane
// has been configured with.
message ControlPlaneCerts {
  // This is the identity issuer certificate chain;
  // it does not include a leaf certificate
  repeated CertData issuer_crt_chain = 1;
  // The roots that the control plane has been configured
  // with and will add to newly created proxies
  repeated CertData roots = 2;
}

message CertificateInfo {
  oneof info {
    ControlPlaneCerts control_plane = 1;
  }
}

message Server {
  bytes server = 1;
}

message ServerAuthorization {
  bytes server_authorization = 1;
}

message AuthPolicyInfo {
  repeated Server servers = 1;
  repeated ServerAuthorization server_authorizations = 2;
}

message TrafficSplit {
  bytes traffic_split = 1;
}

message TrafficSplitInfo {
  repeated TrafficSplit traffic_splits = 1;
}

message ServiceProfile {
  bytes service_profile = 1;
}

message ServiceProfileInfo {
  repeated ServiceProfile service_profiles = 1;
}

message MulticlusterLink {
  bytes multicluster_link = 1;
}

message MulticlusterInfo {
  repeated MulticlusterLink multicluster_links = 1;
}

message LinkerdMessage {
  Auth auth = 1 [deprecated=true];
  oneof message {
    CertificateInfo crt_info = 2;
    AuthPolicyInfo auth_policy_info = 3;
    TrafficSplitInfo traffic_split_info = 4;
    ServiceProfileInfo service_profile_info = 5;
    MulticlusterInfo multicluster_info = 6;
  }
}

//
// ManageAgent Messages
//

message GetProxyDiagnostics {
  string diagnostic_id = 1;
  string pod_name = 2;
  string pod_namespace = 3;
}

message GetProxyLogs {
  string pod_name = 1;
  string pod_namespace = 2;
  int32 num_lines = 3;
}

message AgentCommand {
  oneof command {
    GetProxyDiagnostics get_proxy_diagnostics = 1;
    GetProxyLogs get_proxy_logs = 2;
  }
}

//
// ProxyDiagnostic Messages
//


message ProxyDiagnostic {
  Auth auth = 1 [deprecated=true];
  string diagnostic_id = 2;
  bytes logs = 3;
  repeated bytes metrics = 4;
  Pod pod_manifest = 5;
  ConfigMap linkerd_config_map = 6;
  repeated Node nodes = 7;
  Service k8s_service_manifest = 8;
}

//
// ProxyLog Messages
//

message ProxyLog {
  Auth auth = 1 [deprecated=true];
  string pod_name = 2;
  string pod_namespace = 3;
  bytes lines = 4;
  google.protobuf.Timestamp timestamp = 5;
}

//
// API
//

service Api {
  rpc WorkloadStream(stream WorkloadMessage) returns (Empty) {}
  rpc AddEvent(Event) returns (Empty) {}
  rpc LinkerdInfo(LinkerdMessage) returns (Empty) {}
  rpc ManageAgent(Auth) returns (stream AgentCommand) {}
  rpc ProxyDiagnostics(ProxyDiagnostic) returns (Empty) {}
  rpc ProxyLogs(ProxyLog) returns (Empty) {}
}
