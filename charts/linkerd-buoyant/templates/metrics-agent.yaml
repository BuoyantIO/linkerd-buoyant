#
# Metrics Agent config
#
kind: ConfigMap
metadata:
  name: buoyant-cloud-metrics
  {{- if eq .Release.Service "Buoyant Cloud" }}
  namespace: {{.Release.Namespace}}
  {{- end }}
  labels:
    app.kubernetes.io/part-of: buoyant-cloud
apiVersion: v1
data:
  agent.yml: |
    server:
      log_level: {{ .Values.metrics.logLevel }}
      http_listen_port: 9991
    metrics:
      wal_directory: /tmp/wal
      global:
        scrape_interval: 10s
        external_labels:
          cluster_id: ${AGENT_ID}
          cluster_name: ${AGENT_NAME}
      configs:
      - host_filter: true
        name: buoyant-cloud-metrics
        wal_truncate_frequency: "1m"
        remote_write:
        - url: http{{- if not .Values.metrics.noTLS}}s{{- end}}://{{.Values.metrics.apiAddress}}/remote-write
          oauth2:
            client_id: ${CLIENT_ID}
            client_secret: ${CLIENT_SECRET}
            token_url: http{{- if not .Values.api.noTLS}}s{{- end}}://{{.Values.api.apiAddress}}/agent-token?agent_id=${AGENT_ID}
          queue_config:
            capacity: 1500
            max_shards: 20
            max_backoff: 10s

        scrape_configs:

        - job_name: 'buoyant-cloud-agent'
          kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
              - 'buoyant-cloud'
          relabel_configs:
          - source_labels: [__meta_kubernetes_pod_container_port_name]
            regex:         ^admin$
            action:        keep
          - source_labels: [__meta_kubernetes_pod_container_name]
            regex:         ^buoyant-cloud-agent|buoyant-cloud-metrics$
            action:        keep
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: pod
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)

          metric_relabel_configs:
          - source_labels: [__name__]
            regex: ^go_memstats_alloc_bytes|go_memstats_alloc_bytes_total|go_memstats_heap_inuse_bytes|go_memstats_stack_inuse_bytes|process_resident_memory_bytes|process_virtual_memory_bytes|up$
            action: keep

        # scrape_configs copied from `linkerd install`

        - job_name: 'kubernetes-nodes-cadvisor'
          scheme: https
          tls_config:
            ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            insecure_skip_verify: true
          bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
          kubernetes_sd_configs:
          - role: node
          relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
          metric_relabel_configs:
          - source_labels: [__name__]
            regex: ^container_cpu_usage_seconds_total|container_memory_working_set_bytes|machine_cpu_cores|machine_memory_bytes$
            action: keep
          - source_labels: [pod]
            target_label: workload_kind
            regex: ^(.*)-[bcdfghjklmnpqrstvwxz2456789]{5,15}$
            action: replace
            replacement: Deployment
          - source_labels: [pod]
            target_label: workload_kind
            regex: ^(.*)-[0-9]+$
            action: replace
            replacement: StatefulSet
          - source_labels: [pod]
            target_label: workload_kind
            regex: ^(.*)-[bcdfghjklmnpqrstvwxz2456789]{5}$
            action: replace
            replacement: DaemonSet
          - source_labels: [pod]
            target_label: workload_kind
            regex: ^(.*)-[456789bcdf]{1,10}-[bcdfghjklmnpqrstvwxz2456789]{5}$
            action: replace
            replacement: Deployment
          - source_labels: [pod]
            target_label: workload_name
            regex: ^(.*)-[bcdfghjklmnpqrstvwxz2456789]{5,15}$
            action: replace
            replacement: $1
          - source_labels: [pod]
            target_label: workload_name
            regex: ^(.*)-[0-9]+$
            action: replace
            replacement: $1
          - source_labels: [pod]
            target_label: workload_name
            regex: ^(.*)-[bcdfghjklmnpqrstvwxz2456789]{5}$
            action: replace
            replacement: $1
          - source_labels: [pod]
            target_label: workload_name
            regex: ^(.*)-[456789bcdf]{1,10}-[bcdfghjklmnpqrstvwxz2456789]{5}$
            action: replace
            replacement: $1

        - job_name: 'linkerd-proxy'
          kubernetes_sd_configs:
          - role: pod
          relabel_configs:
          - source_labels:
            - __meta_kubernetes_pod_container_name
            - __meta_kubernetes_pod_container_port_name
            action: keep
            regex: ^linkerd-proxy;linkerd-admin$
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: pod
          # special case k8s' "job" label, to not interfere with prometheus' "job"
          # label
          # __meta_kubernetes_pod_label_linkerd_io_proxy_job=foo =>
          # k8s_job=foo
          - source_labels: [__meta_kubernetes_pod_label_linkerd_io_proxy_job]
            action: replace
            target_label: k8s_job
          # drop __meta_kubernetes_pod_label_linkerd_io_proxy_job
          - action: labeldrop
            regex: __meta_kubernetes_pod_label_linkerd_io_proxy_job
          # __meta_kubernetes_pod_label_linkerd_io_proxy_deployment=foo =>
          # deployment=foo
          - action: labelmap
            regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
          # drop all labels that we just made copies of in the previous labelmap
          - action: labeldrop
            regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
          # __meta_kubernetes_pod_label_linkerd_io_foo=bar =>
          # foo=bar
          - action: labelmap
            regex: __meta_kubernetes_pod_label_linkerd_io_(.+)

          # __meta_kubernetes_pod_controller_kind=DaemonSet => workload_kind=DaemonSet
          # __meta_kubernetes_pod_controller_name=foo       => workload_name=foo
          - source_labels: [__meta_kubernetes_pod_controller_kind]
            action: replace
            target_label: workload_kind
          - source_labels: [__meta_kubernetes_pod_controller_name]
            action: replace
            target_label: workload_name

          # __meta_kubernetes_pod_controller_kind=ReplicaSet  => workload_kind=Deployment
          # __meta_kubernetes_pod_controller_name=foo-bar-123 => workload_name=foo-bar
          - source_labels: [__meta_kubernetes_pod_controller_kind]
            action: replace
            regex: ^ReplicaSet$
            target_label: workload_kind
            replacement: Deployment
          - source_labels:
            - __meta_kubernetes_pod_controller_kind
            - __meta_kubernetes_pod_controller_name
            action: replace
            regex: ^ReplicaSet;(.*)-[^-]+$
            target_label: workload_name

          metric_relabel_configs:

          # keep linkerd metrics relevant to buoyant cloud
          - source_labels: [__name__]
            regex: ^response_total|response_latency_ms_bucket|route_response_total|route_response_latency_ms_bucket|tcp_open_connections|tcp_read_bytes_total|tcp_write_bytes_total|inbound_http_authz_allow_total|inbound_http_authz_deny_total|inbound_tcp_authz_allow_total|inbound_tcp_authz_deny_total$
            action: keep

          # drop high-cardinality outbound latency histograms
          - source_labels:
            - __name__
            - direction
            regex: 'response_latency_ms_bucket;outbound'
            action: drop

          # drop some latency buckets
          - source_labels:
            - le
            regex: ^2.*|3.*|4.*$
            action: drop

          # drop high-cardinality outbound tcp open connections
          - source_labels:
            - __name__
            - direction
            regex: 'tcp_open_connections;outbound'
            action: drop

          # drop high-cardinality outbound tcp read bytes
          - source_labels:
            - __name__
            - direction
            regex: 'tcp_read_bytes_total;outbound'
            action: drop

          # drop high-cardinality outbound tcp write bytes
          - source_labels:
            - __name__
            - direction
            regex: 'tcp_write_bytes_total;outbound'
            action: drop

          # drop linkerd workload labels (superseded by workload_kind, workload_name)
          - action: labeldrop
            regex: 'deployment'
          - action: labeldrop
            regex: 'daemonset'
          - action: labeldrop
            regex: 'statefulset'

          # foo{direction="outbound"} => outbound_foo{}
          - source_labels:
            - __name__
            - direction
            regex: ^(.+);(inbound|outbound)$
            action: replace
            target_label: __name__
            replacement: $${2}_$${1}
          - action: labeldrop
            regex: direction

          # dst_daemonset=foo => dst_workload_name=foo
          # dst_daemonset=foo => dst_workload_kind=DaemonSet
          - source_labels: [dst_daemonset]
            regex: (.+)
            action: replace
            target_label: dst_workload_name
          - source_labels: [dst_daemonset]
            regex: (.+)
            action: replace
            target_label: dst_workload_kind
            replacement: DaemonSet
          - action: labeldrop
            regex: 'dst_daemonset'

          # dst_deployment=foo => dst_workload_name=foo
          # dst_deployment=foo => dst_workload_kind=Deployment
          - source_labels: [dst_deployment]
            regex: (.+)
            action: replace
            target_label: dst_workload_name
          - source_labels: [dst_deployment]
            regex: (.+)
            action: replace
            target_label: dst_workload_kind
            replacement: Deployment
          - action: labeldrop
            regex: 'dst_deployment'

          # dst_statefulset=foo => dst_workload_name=foo
          # dst_statefulset=foo => dst_workload_kind=StatefulSet
          - source_labels: [dst_statefulset]
            regex: (.+)
            action: replace
            target_label: dst_workload_name
          - source_labels: [dst_statefulset]
            regex: (.+)
            action: replace
            target_label: dst_workload_kind
            replacement: StatefulSet
          - action: labeldrop
            regex: 'dst_statefulset'

          # drop remaining high-cardinality linkerd metrics and labels
          - action: labeldrop
            regex: 'pod_template_hash'
          - action: labeldrop
            regex: 'dst_pod_template_hash'
          - action: labeldrop
            regex: 'dst_serviceaccount'
          - action: labeldrop
            regex: 'server_id'
          - action: labeldrop
            regex: 'control_plane_ns'
          - action: labeldrop
            regex: 'dst_control_plane_ns'
          - action: labeldrop
            regex: 'workload_ns'

        - job_name: 'multicluster-link'
          kubernetes_sd_configs:
          - role: pod
          relabel_configs:
          - source_labels:
            - __meta_kubernetes_pod_container_name
            - __meta_kubernetes_pod_container_port_name
            action: keep
            regex: ^service-mirror;admin-http$
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: namespace

          metric_relabel_configs:

          # keep link metrics relevant to buoyant cloud
          - source_labels: [__name__]
            regex: ^gateway_alive|gateway_probe_latency_ms_bucket$
            action: keep

          # drop some latency buckets
          - source_labels:
            - le
            regex: ^2.*|3.*|4.*$
            action: drop
---
#
# Metrics Agent
#
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: buoyant-cloud-metrics
  {{- if eq .Release.Service "Buoyant Cloud" }}
  namespace: {{.Release.Namespace}}
  {{- end }}
  annotations:
    buoyant.cloud/is-metrics: "true"
    buoyant.cloud/version: v{{ .Chart.Version }}
    buoyant.cloud/service-name: metrics
  labels:
    app.kubernetes.io/name: metrics
    app.kubernetes.io/version: v{{ .Chart.Version }}
    app.kubernetes.io/part-of: buoyant-cloud
    linkerd.io/extension: buoyant
spec:
  selector:
    matchLabels:
      app: buoyant-cloud-metrics
  template:
    metadata:
      labels:
        app: buoyant-cloud-metrics
    spec:
      securityContext:
        fsGroup: 1000
      serviceAccount: buoyant-cloud-agent
      tolerations:
      - operator: Exists
        effect: NoSchedule
      containers:
      - name: buoyant-cloud-metrics
        image: grafana/agent:v0.23.0
        args:
        - -config.file=/buoyant-cloud-metrics/agent.yml
        - -config.expand-env
        ports:
        - name: admin
          containerPort: 9991
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9991
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9991
        resources:
          requests:
            cpu: 10m
            memory: 10Mi
          limits:
            cpu: "2"
            memory: 5000Mi
        securityContext:
          allowPrivilegeEscalation: false
          privileged: false
          readOnlyRootFilesystem: true
          runAsGroup: 1000
          runAsNonRoot: true
          runAsUser: 1000
        env:
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: CLIENT_ID
          valueFrom:
            secretKeyRef:
              key: client_id
              name: buoyant-cloud-org-credentials
        - name: CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              key: client_secret
              name: buoyant-cloud-org-credentials
        - name: AGENT_ID
          valueFrom:
            configMapKeyRef:
              key: agent_id
              name: agent-metadata
        - name: AGENT_NAME
          valueFrom:
            configMapKeyRef:
              key: agent_name
              name: agent-metadata
        volumeMounts:
        - mountPath: /buoyant-cloud-metrics
          name: buoyant-cloud-metrics
        - mountPath: /tmp
          name: tmp
      initContainers:
      - name: metrics-agent-init
        image: bash:4.0.44
        command:
        - /bin/sh
        - -c
        - |
          while ! test -f "/agent-metadata/agent_id"; do
            sleep 1
            echo "Waiting for agent registration"
          done
          echo "Found registered agent with ID: $(cat /agent-metadata/agent_id)"
        volumeMounts:
        - mountPath: /agent-metadata
          name: agent-metadata
      volumes:
      - configMap:
          name: buoyant-cloud-metrics
        name: buoyant-cloud-metrics
      - configMap:
          name: agent-metadata
        name: agent-metadata
      - name: tmp
        emptyDir: {}
