// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bcloud

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiClient is the client API for Api service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiClient interface {
	WorkloadStream(ctx context.Context, opts ...grpc.CallOption) (Api_WorkloadStreamClient, error)
	AddEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Empty, error)
	LinkerdInfo(ctx context.Context, in *LinkerdMessage, opts ...grpc.CallOption) (*Empty, error)
	ManageAgent(ctx context.Context, in *Auth, opts ...grpc.CallOption) (Api_ManageAgentClient, error)
	ProxyDiagnostics(ctx context.Context, in *ProxyDiagnostic, opts ...grpc.CallOption) (*Empty, error)
}

type apiClient struct {
	cc grpc.ClientConnInterface
}

func NewApiClient(cc grpc.ClientConnInterface) ApiClient {
	return &apiClient{cc}
}

func (c *apiClient) WorkloadStream(ctx context.Context, opts ...grpc.CallOption) (Api_WorkloadStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Api_ServiceDesc.Streams[0], "/buoyant.cloud.Api/WorkloadStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiWorkloadStreamClient{stream}
	return x, nil
}

type Api_WorkloadStreamClient interface {
	Send(*WorkloadMessage) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type apiWorkloadStreamClient struct {
	grpc.ClientStream
}

func (x *apiWorkloadStreamClient) Send(m *WorkloadMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *apiWorkloadStreamClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiClient) AddEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/buoyant.cloud.Api/AddEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) LinkerdInfo(ctx context.Context, in *LinkerdMessage, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/buoyant.cloud.Api/LinkerdInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) ManageAgent(ctx context.Context, in *Auth, opts ...grpc.CallOption) (Api_ManageAgentClient, error) {
	stream, err := c.cc.NewStream(ctx, &Api_ServiceDesc.Streams[1], "/buoyant.cloud.Api/ManageAgent", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiManageAgentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Api_ManageAgentClient interface {
	Recv() (*AgentCommand, error)
	grpc.ClientStream
}

type apiManageAgentClient struct {
	grpc.ClientStream
}

func (x *apiManageAgentClient) Recv() (*AgentCommand, error) {
	m := new(AgentCommand)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiClient) ProxyDiagnostics(ctx context.Context, in *ProxyDiagnostic, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/buoyant.cloud.Api/ProxyDiagnostics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServer is the server API for Api service.
// All implementations must embed UnimplementedApiServer
// for forward compatibility
type ApiServer interface {
	WorkloadStream(Api_WorkloadStreamServer) error
	AddEvent(context.Context, *Event) (*Empty, error)
	LinkerdInfo(context.Context, *LinkerdMessage) (*Empty, error)
	ManageAgent(*Auth, Api_ManageAgentServer) error
	ProxyDiagnostics(context.Context, *ProxyDiagnostic) (*Empty, error)
	mustEmbedUnimplementedApiServer()
}

// UnimplementedApiServer must be embedded to have forward compatible implementations.
type UnimplementedApiServer struct {
}

func (UnimplementedApiServer) WorkloadStream(Api_WorkloadStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method WorkloadStream not implemented")
}
func (UnimplementedApiServer) AddEvent(context.Context, *Event) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEvent not implemented")
}
func (UnimplementedApiServer) LinkerdInfo(context.Context, *LinkerdMessage) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkerdInfo not implemented")
}
func (UnimplementedApiServer) ManageAgent(*Auth, Api_ManageAgentServer) error {
	return status.Errorf(codes.Unimplemented, "method ManageAgent not implemented")
}
func (UnimplementedApiServer) ProxyDiagnostics(context.Context, *ProxyDiagnostic) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProxyDiagnostics not implemented")
}
func (UnimplementedApiServer) mustEmbedUnimplementedApiServer() {}

// UnsafeApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServer will
// result in compilation errors.
type UnsafeApiServer interface {
	mustEmbedUnimplementedApiServer()
}

func RegisterApiServer(s grpc.ServiceRegistrar, srv ApiServer) {
	s.RegisterService(&Api_ServiceDesc, srv)
}

func _Api_WorkloadStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ApiServer).WorkloadStream(&apiWorkloadStreamServer{stream})
}

type Api_WorkloadStreamServer interface {
	SendAndClose(*Empty) error
	Recv() (*WorkloadMessage, error)
	grpc.ServerStream
}

type apiWorkloadStreamServer struct {
	grpc.ServerStream
}

func (x *apiWorkloadStreamServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *apiWorkloadStreamServer) Recv() (*WorkloadMessage, error) {
	m := new(WorkloadMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Api_AddEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).AddEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buoyant.cloud.Api/AddEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).AddEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_LinkerdInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkerdMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).LinkerdInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buoyant.cloud.Api/LinkerdInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).LinkerdInfo(ctx, req.(*LinkerdMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_ManageAgent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Auth)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServer).ManageAgent(m, &apiManageAgentServer{stream})
}

type Api_ManageAgentServer interface {
	Send(*AgentCommand) error
	grpc.ServerStream
}

type apiManageAgentServer struct {
	grpc.ServerStream
}

func (x *apiManageAgentServer) Send(m *AgentCommand) error {
	return x.ServerStream.SendMsg(m)
}

func _Api_ProxyDiagnostics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProxyDiagnostic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).ProxyDiagnostics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/buoyant.cloud.Api/ProxyDiagnostics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).ProxyDiagnostics(ctx, req.(*ProxyDiagnostic))
	}
	return interceptor(ctx, in, info, handler)
}

// Api_ServiceDesc is the grpc.ServiceDesc for Api service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Api_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "buoyant.cloud.Api",
	HandlerType: (*ApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddEvent",
			Handler:    _Api_AddEvent_Handler,
		},
		{
			MethodName: "LinkerdInfo",
			Handler:    _Api_LinkerdInfo_Handler,
		},
		{
			MethodName: "ProxyDiagnostics",
			Handler:    _Api_ProxyDiagnostics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WorkloadStream",
			Handler:       _Api_WorkloadStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ManageAgent",
			Handler:       _Api_ManageAgent_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "buoyant-cloud-api.proto",
}
