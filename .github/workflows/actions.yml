name: Actions

on:
  push:
    branches:
    - main
    tags:
    - 'v*'
  pull_request:
    branches:
    - main

defaults:
  run:
    shell: bash

jobs:

  go_unit_tests:
    name: Go Unit Tests
    runs-on: ubuntu-20.04
    container:
      image: golang:1.17.0
    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Test
      run: go test -race -mod=readonly -cover -v ./...

  go_lint:
    name: Go Lint
    runs-on: ubuntu-20.04
    container:
      image: golang:1.17.0
    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Lint
      run: bin/lint

  build_cli:
    name: Build CLI
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        include:
        - platform: linux-amd64
          goos: linux
          goarch: amd64
          exe: ""
        - platform: linux-arm64
          goos: linux
          goarch: arm64
          exe: ""
        - platform: linux-arm
          goos: linux
          goarch: arm
          exe: ""
        - platform: darwin-amd64
          goos: darwin
          goarch: amd64
          exe: ""
        - platform: darwin-arm64
          goos: darwin
          goarch: arm64
          exe: ""
        - platform: windows
          goos: windows
          goarch: ""
          exe: .exe
    container:
      image: golang:1.17.0
    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Parse GITHUB_REF
      run: echo "tag=${GITHUB_REF##*/}" >> $GITHUB_ENV

    - name: Generate linkerd-buoyant name
      run: echo "linkerd-buoyant-bin=linkerd-buoyant-${{ env.tag }}-${{ matrix.platform }}${{ matrix.exe }}" >> $GITHUB_ENV

    - name: Build CLI
      run: CGO_ENABLED=0 GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o ${{ env.linkerd-buoyant-bin }} -mod=readonly -ldflags "-s -w -X github.com/buoyantio/linkerd-buoyant/cli/pkg/version.Version=${{ env.tag }}" cli/main.go

    - name: Upload CLI Executable
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.linkerd-buoyant-bin }}
        path: ${{ env.linkerd-buoyant-bin }}

  smoke_test_cli:
    name: Smoke Test CLI
    needs:
    - build_cli
    strategy:
      matrix:
        include:
        # no arm runner available, skip linux-arm64, linux-arm, and darwin-arm64
        - platform: linux-amd64
          os: ubuntu-20.04
          exe: ""
        - platform: darwin-amd64
          os: macos-10.15
          exe: ""
        - platform: windows
          os: windows-2019
          exe: .exe
    runs-on: ${{ matrix.os }}
    steps:
    - name: Parse GITHUB_REF
      run: echo "tag=${GITHUB_REF##*/}" >> $GITHUB_ENV

    - name: Generate linkerd-buoyant name
      run: echo "linkerd-buoyant-bin=linkerd-buoyant-${{ env.tag }}-${{ matrix.platform }}${{ matrix.exe }}" >> $GITHUB_ENV

    - name: Download CLI Executable
      uses: actions/download-artifact@v2
      with:
        name: ${{ env.linkerd-buoyant-bin }}

    - name: Run CLI
      run: |
        ls -R
        chmod +x ${{ env.linkerd-buoyant-bin }}
        ./${{ env.linkerd-buoyant-bin }} version --cli

  helm_tests:
    name: Helm Tests
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Set up Helm
      uses: azure/setup-helm@v1
      with:
        version: v3.7.1

    - uses: actions/setup-python@v2
      with:
        python-version: 3.7

    - name: Set up chart-testing
      uses: helm/chart-testing-action@v2.1.0

    - name: Validate chart README.md is up to date
      run: |
        bin/helm-docs --chart-search-root=charts
        git diff --exit-code charts/linkerd-buoyant/README.md

    - name: Update Chart version
      run: |
        sed -i "s/0.0.0-undefined/0.0.0/g" charts/linkerd-buoyant/Chart.yaml

    - name: Run chart-testing (list-changed)
      id: list-changed
      run: |
        changed=$(ct list-changed --config charts/ct.yaml)
        if [[ -n "$changed" ]]; then
          echo "::set-output name=changed::true"
        fi

    - name: Run chart-testing (lint)
      run: ct lint --config charts/ct.yaml

    - name: Create kind cluster
      uses: helm/kind-action@v1.2.0
      if: steps.list-changed.outputs.changed == 'true'

    - name: Create buoyant-cloud namespace
      run: |
        kubectl create ns buoyant-cloud

    - name: Build and load agent image
      run: |
        docker build  -f agent/Dockerfile . -t bcloud-agent:ci-run
        kind load docker-image bcloud-agent:ci-run --name=chart-testing

    - name: Run chart-testing (install)
      run: ct install --config charts/ct.yaml

  # everything below here for main merges or releases (tags)
  docker_build_and_push:
    name: Docker Build and Push
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main'
    needs:
    - go_unit_tests
    - go_lint
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Docker tags (for main)
        if: github.ref == 'refs/heads/main'
        run: |
          echo "platforms=linux/amd64" >> $GITHUB_ENV
          echo "docker_tags=ghcr.io/buoyantio/linkerd-buoyant:latest" >> $GITHUB_ENV
      - name: Generate Docker tags (for tagged release)
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          echo "platforms=linux/amd64,linux/arm64,linux/arm/v6,linux/arm/v7" >> $GITHUB_ENV
          echo "docker_tags=ghcr.io/buoyantio/linkerd-buoyant:latest,ghcr.io/buoyantio/linkerd-buoyant:${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: agent/Dockerfile
          platforms: ${{ env.platforms }}
          push: true
          tags: ${{ env.docker_tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
      - name: Move cache
        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  # everything below here for releases (tags)
  create_release:
    if: startsWith(github.ref, 'refs/tags/v')
    name: Create Release
    needs:
    - go_unit_tests
    - go_lint
    - smoke_test_cli
    - helm_tests
    - docker_build_and_push
    runs-on: ubuntu-20.04
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        draft: false
        prerelease: false

  upload_release_assets:
    if: startsWith(github.ref, 'refs/tags/v')
    name: Upload Release Assets
    needs:
    - create_release
    strategy:
      matrix:
        include:
        - platform: linux-amd64
          exe: ""
        - platform: linux-arm64
          exe: ""
        - platform: linux-arm
          exe: ""
        - platform: darwin-amd64
          exe: ""
        - platform: darwin-arm64
          exe: ""
        - platform: windows
          exe: .exe
    runs-on: ubuntu-20.04
    steps:
    - name: Parse GITHUB_REF
      run: echo "tag=${GITHUB_REF##*/}" >> $GITHUB_ENV

    - name: Generate linkerd-buoyant name
      run: echo "linkerd-buoyant-bin=linkerd-buoyant-${{ env.tag }}-${{ matrix.platform }}${{ matrix.exe }}" >> $GITHUB_ENV

    - name: Download CLI Executable
      uses: actions/download-artifact@v2
      with:
        name: ${{ env.linkerd-buoyant-bin }}

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ./${{ env.linkerd-buoyant-bin }}
        asset_name: ${{ env.linkerd-buoyant-bin }}
        asset_content_type: application/octet-stream

  create_helm_release:
    if: startsWith(github.ref, 'refs/tags/v')
    name: Create Helm Release
    needs:
    - create_release
    - upload_release_assets
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Set Helm tag version
      run: |
        echo "helm_tag=${GITHUB_REF##*/v}" >> $GITHUB_ENV

    - name: Set Helm package name
      run: echo "helm_package=linkerd-buoyant-${{ env.helm_tag }}.tgz" >> $GITHUB_ENV

    # this step modifies the Helm chart in-place, in preparation for release
    - name: Update Chart version
      env:
        helm_tag: ${{ env.helm_tag }}
      run: |
        sed -i "s/0.0.0-undefined/$helm_tag/g" charts/linkerd-buoyant/Chart.yaml

    - name: Set up Helm
      uses: azure/setup-helm@v1
      with:
        version: v3.4.0

    - name: Package Helm chart
      run: |
        bin/cr package charts/linkerd-buoyant --config charts/cr.yaml

    - name: Upload Helm chart package to GitHub Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ./.cr-release-packages/${{ env.helm_package }}
        asset_name: ${{ env.helm_package }}
        asset_content_type: application/octet-stream

    - name: Configure Git
      run: |
        git config user.name "Helm Releaser"
        git config user.email info@buoyant.io

    # TODO: `cr index` downloads the helm package from the GitHub Release. It
    # attempts to unpack the first asset it sees. This only works for us because
    # our Helm package is listed first alphabetically in the GitHub Release.
    - name: Update Helm chart index.yaml
      env:
        CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      run: |
        mkdir .cr-index
        bin/cr index --config charts/cr.yaml
